#line 2 "js_scanner.h"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 126
#define YY_END_OF_BUFFER 127
static yyconst short int yy_accept[317] =
    {   0,
        0,    0,   34,   34,    0,    0,    0,    0,    0,    0,
      127,  125,  123,   40,  108,  109,  117,  108,  108,  107,
      107,  107,  107,  107,  106,  122,  122,  108,  107,  108,
      108,  117,  117,  117,  117,  125,  108,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  108,   34,   36,   35,   33,   31,    9,   33,   32,
       30,    8,   32,    7,    6,    2,    7,  123,   90,  117,
      114,  116,  111,  113,  110,  112,  115,   92,  104,   93,
       88,  102,   86,  103,   87,  118,   44,   43,   89,  119,
      122,    0,    0,    0,  101,   82,   84,   83,  100,  117,

      117,  117,  117,    0,   95,  117,  117,  117,  117,   58,
      117,  117,  117,  117,  117,  117,   52,   53,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,   94,  105,   34,   35,   35,   37,   27,   29,
       15,   13,   11,   21,   23,   25,   19,   17,   26,   28,
       14,   12,   10,   20,   22,   24,   18,   16,    3,    4,
        1,   91,    0,    0,   43,   42,  118,    0,    0,  120,
      121,    0,   98,   85,   97,   99,  117,   65,  117,  117,
      124,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   49,  117,  117,  117,   54,  117,  117,  117,  117,

      117,  117,  117,  117,  117,   67,  117,  117,  117,    5,
       39,    0,  118,    0,    0,  119,    0,   96,  117,  117,
      117,  117,   71,  117,  117,  117,  117,   47,  117,   73,
      117,  117,  117,  117,   56,  117,  117,  117,   59,   63,
      117,  117,  117,   60,  117,   69,    0,  118,    0,   41,
        0,  117,  117,  117,   45,  117,   50,  117,  117,  117,
       48,  117,  117,   74,  117,  117,  117,  117,  117,  117,
       68,    0,  117,   79,   78,  117,  117,  117,   55,   80,
      117,  117,  117,  117,   57,   70,   62,  117,  117,   38,
      117,  117,  117,   72,  117,  117,  117,  117,  117,  117,

       66,   46,  117,   51,   75,  117,   76,  117,   81,  117,
      117,   64,  117,   77,   61,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       10,   11,   12,   10,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   10,   10,   18,
       19,   20,   21,    1,   22,   22,   22,   22,   23,   24,
       25,   25,   26,   25,   25,   25,   25,   27,   25,   25,
       25,   25,   28,   25,   25,   25,   25,   29,   25,   25,
       10,   30,   10,   31,   32,   33,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   25,   43,   44,   45,   46,
       47,   48,   25,   49,   50,   51,   52,   53,   54,   29,
       55,   25,   10,   56,   10,   21,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    3,    3,    1,
        4,    3,    1,    1,    1,    5,    5,    1,    1,    1,
        1,    5,    5,    5,    3,    3,    3,    3,    3,    1,
        1,    3,    3,    5,    5,    5,    5,    5,    5,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1
    } ;

static yyconst short int yy_base[329] =
    {   0,
        0,    0,   54,   55,   56,   57,   60,   61,   64,   65,
      533,  783,  487,  783,  430,  783,   65,  365,   64,  783,
      344,   59,   80,   68,   77,   86,   90,  101,  331,   91,
      783,  114,  121,  126,   93,  346,  307,   87,  106,  114,
      112,  116,  135,  137,   97,  138,  139,  143,  136,  149,
      163,   56,    0,  783,  103,  783,  783,  783,  213,  783,
      783,  783,  262,  783,  783,  101,  294,  286,  264,  160,
      783,  783,  783,  783,  165,  168,  783,  783,  783,  783,
      783,  783,  783,  245,  783,  190,  783,  253,  783,  207,
      215,  223,    0,  236,  222,  783,  215,  783,   97,  169,

      192,  216,  208,  177,  783,  199,  175,  220,  235,  221,
      241,  242,  229,  246,  250,  243,  248,  251,  280,  271,
      272,  278,  283,  276,  287,  281,  288,  304,  297,  303,
      309,  313,  783,  783,    0,  199,  140,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  158,  146,
      783,  783,  137,  341,  139,  783,  343,  355,  194,  230,
        0,   95,  783,  783,  783,   82,  310,  335,  339,  336,
      783,  341,  342,  345,  343,  348,  351,  352,  349,  358,
      364,  365,  371,  377,  372,  374,  378,  375,  379,  381,

      384,  401,  403,  404,  394,  406,  411,  413,  409,  783,
      783,  303,  404,  454,  435,  443,  283,  783,  428,  430,
      435,  441,  420,  443,  439,  442,  449,  444,  454,  452,
      465,  456,  463,  471,  458,  478,  477,  484,  479,  480,
      487,  485,  491,  488,  504,  494,  528,  531,  538,  783,
      546,  516,  518,  520,  501,  523,  527,  529,  528,  540,
      530,  542,  543,  537,  562,  553,  549,  559,  566,  557,
      563,  599,  569,  570,  572,  573,  576,  579,  582,  583,
      589,  593,  595,  603,  598,  599,  604,  606,  609,  650,
      612,  628,  608,  620,  631,  635,  634,  637,  640,  641,

      642,  648,  650,  651,  656,  657,  661,  662,  663,  670,
      667,  664,  677,  671,  673,  783,  729,  734,  739,  744,
      747,  752,  757,  762,  767,  772,   84,  777
    } ;

static yyconst short int yy_def[329] =
    {   0,
      316,    1,  317,  317,  318,  318,  319,  319,  320,  320,
      316,  316,  316,  316,  316,  316,  321,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  321,  321,  321,   34,  316,  316,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  316,  322,  316,  323,  316,  316,  316,  324,  316,
      316,  316,  325,  316,  316,  316,  316,  316,  316,   34,
      316,  316,  316,  316,   34,   34,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  326,  316,  316,
      316,  316,  327,  316,  316,  316,  316,  316,  316,   34,

       34,   34,   34,  316,  316,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,  316,  316,  322,  323,  323,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  326,  316,  316,  316,  316,  316,
      327,  316,  316,  316,  316,  316,   34,   34,   34,   34,
      316,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,  316,
      316,  316,  316,  316,  316,  316,  328,  316,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  316,  316,  328,  316,
      328,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  328,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,  328,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,    0,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316
    } ;

static yyconst short int yy_nxt[840] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   16,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   32,   32,   32,   33,   34,   35,   32,   36,
       37,   32,   12,   32,   38,   39,   40,   41,   42,   32,
       32,   43,   32,   32,   32,   44,   32,   45,   46,   47,
       48,   49,   50,   51,   32,   52,   54,   54,   57,   57,
       58,   58,   61,   61,   55,   55,   65,   65,   62,   62,
       82,   79,   71,   72,  133,   73,   74,   83,   66,   66,
       75,   75,   80,   86,   86,   59,   59,   87,  171,   63,
       63,   88,   84,   67,   67,   89,   76,   77,   85,   90,

      218,   91,   91,   90,   94,   91,   91,  217,   92,   98,
       99,  134,   92,  137,   93,  175,  176,  138,   95,   96,
       70,  316,  316,   92,  316,  316,   70,   92,  316,  316,
      122,  316,  316,  316,  316,  106,  316,  316,   70,  107,
      159,  166,  160,  103,   70,   70,  316,   70,   70,  114,
      137,  109,  108,  316,  316,  111,  211,   70,  316,  101,
      110,  112,  115,   70,  113,   70,  100,  116,   70,   70,
       70,   70,   70,  117,  120,  123,   70,  102,  104,  181,
      118,  128,  129,  125,  119,  210,   70,   70,  121,   70,
       70,  126,  124,   70,   70,  130,   70,  127,   70,  210,

       70,   70,   70,  131,  132,   86,   86,  177,   70,  170,
      170,   70,  164,  316,   70,  140,   70,  141,  178,   70,
       70,  142,  167,  167,  183,   70,   70,  164,   90,  168,
       91,   91,   70,  174,  169,  169,  182,   92,  170,  170,
      173,   70,  143,   70,  168,  170,  170,  144,  172,   70,
       70,  145,   92,   70,   70,  166,  180,  163,  146,   70,
      179,  147,  190,  148,  150,  184,  151,   70,   70,  185,
      152,   70,   70,  186,   70,   70,   70,  189,  187,   70,
       70,   70,  162,   70,   70,  250,   70,   68,  193,  191,
      188,  153,   70,   70,   70,  251,  154,   70,  192,   70,

      155,   70,   70,  194,   70,   70,  195,  156,  161,   70,
      157,   70,  158,   70,   70,  197,   70,  200,  213,  213,
       70,   70,   70,   70,  196,  105,  198,   70,  201,   70,
       70,   70,  202,  199,   70,  203,   70,   70,   70,   70,
      204,  205,   70,   70,  207,  206,   70,  104,   70,   97,
      208,  219,  212,  212,   70,   70,  213,  213,  167,  167,
       70,   70,   81,  209,   70,  214,  215,  215,   70,   70,
      216,  216,   70,  220,  222,   70,   70,  221,   70,  223,
      214,  226,  229,   78,   70,   70,   70,   70,  227,  228,
       70,   70,   70,   70,  225,  224,   70,   70,   70,   70,

       70,  230,   70,   70,   70,  234,  232,   70,   70,   70,
       70,   70,   70,  231,   70,   70,   70,   70,  233,  213,
      213,  235,   70,   70,  236,   70,   70,   70,   70,   70,
      237,  238,   70,  239,   70,   70,   70,   70,  240,   70,
      241,  242,   70,  243,   70,   70,   70,  244,   69,  246,
      216,  216,   70,   70,   70,   70,  245,   70,  216,  216,
       70,   70,   70,   70,   70,  247,  247,  253,   70,  248,
      248,   70,   70,  252,   70,   70,   70,   70,  257,   70,
      254,   70,   70,  255,  256,   70,   70,   70,   68,   70,
       70,   70,   70,  258,   70,   70,   70,  264,   70,  259,

       70,  260,  261,   70,   70,   70,  262,   70,  263,   70,
       70,   70,   70,   70,   70,  265,   70,   70,   70,  267,
       70,   70,   70,  269,   70,  266,  270,   70,   70,   70,
       70,   70,  316,  268,   70,   70,   70,   70,   70,   70,
      250,  271,   70,  248,  248,   70,  248,  248,  250,   70,
      251,   70,   70,   70,  316,   70,   70,  273,  272,  275,
       70,   70,   70,   70,  277,  279,  274,   70,  276,   70,
       70,   70,  278,   70,   70,   70,   70,  280,   70,   70,
       70,   70,   70,  281,  282,  283,   70,  284,   70,  286,
      289,   70,   70,   70,   70,   70,   70,  287,  285,   70,

       70,  250,   70,   70,   70,   70,   70,  288,   70,   70,
       70,  272,   70,   70,   70,   70,   70,   70,  290,  291,
       70,   70,   70,   70,  292,  293,   70,   70,   70,  294,
       70,   70,   70,   70,   70,  295,   70,   70,  297,   70,
       70,   70,   70,  296,   70,   70,   70,  316,  298,   70,
       70,  299,  250,   70,   70,   70,  300,   70,  303,   70,
       70,   70,  251,   70,   70,  302,  301,   70,   70,  316,
       70,   70,  305,   70,   70,   70,  304,  308,  309,   70,
      306,   70,   70,  310,   70,   70,   70,  307,   70,   70,
      311,   70,   70,   70,   70,   70,   70,   70,  312,   70,

       70,   70,   70,   70,   70,  313,   70,   70,   70,  316,
       70,  316,   70,   70,   70,   70,  316,  314,   70,  315,
      316,   70,   70,  316,   70,  316,  316,  316,   70,   53,
       53,   53,   53,   53,   56,   56,   56,   56,   56,   60,
       60,   60,   60,   60,   64,   64,   64,   64,   64,   70,
       70,   70,  135,  316,  135,  316,  135,  136,  316,  136,
      136,  136,  139,  139,  139,  139,  139,  149,  149,  149,
      149,  149,  165,  165,  165,  165,  165,  249,  249,  249,
      249,  249,   11,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,

      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316
    } ;

static yyconst short int yy_chk[840] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
        5,    6,    7,    8,    3,    4,    9,   10,    7,    8,
       22,   19,   17,   17,   52,   17,   17,   22,    9,   10,
       17,   17,   19,   24,   24,    5,    6,   25,  327,    7,
        8,   25,   23,    9,   10,   25,   17,   17,   23,   26,

      176,   26,   26,   27,   28,   27,   27,  172,   26,   30,
       30,   52,   27,   55,   26,   99,   99,   55,   28,   28,
       38,   32,   32,   26,   32,   32,   35,   27,   33,   33,
       45,   33,   33,   34,   34,   38,   34,   34,   38,   39,
       66,  165,   66,   35,   35,   41,   32,   40,   45,   42,
      137,   40,   39,   33,  137,   41,  163,   39,   34,   34,
       40,   41,   42,   41,   41,   40,   33,   42,   43,   49,
       44,   46,   47,   43,   44,   46,   48,   34,  104,  104,
       43,   49,   50,   48,   43,  160,   43,   49,   44,   46,
       47,   48,   47,   70,   48,   50,   51,   48,   75,  159,

       50,   76,  100,   51,   51,   86,   86,  100,  107,  169,
      169,   70,   86,  136,   51,   59,   75,   59,  101,   76,
      100,   59,   90,   90,  107,  101,  107,   86,   91,   90,
       91,   91,  106,   97,   92,   92,  106,   91,   92,   92,
       95,  103,   59,  101,   90,  170,  170,   59,   94,  102,
      106,   59,   91,  108,  110,   88,  103,   84,   59,  103,
      102,   59,  113,   59,   63,  108,   63,  102,  109,  109,
       63,  108,  110,  109,  111,  112,  116,  112,  109,  114,
      113,  117,   69,  115,  118,  217,  109,   68,  116,  114,
      111,   63,  111,  112,  116,  217,   63,  114,  115,  117,

       63,  115,  118,  119,  120,  121,  119,   63,   67,  124,
       63,  122,   63,  119,  126,  121,  123,  124,  212,  212,
      125,  127,  120,  121,  120,   37,  122,  124,  125,  122,
      129,  119,  126,  123,  123,  127,  130,  128,  125,  127,
      128,  128,  131,  177,  130,  129,  132,   36,  129,   29,
      131,  177,  164,  164,  130,  128,  164,  164,  167,  167,
      131,  177,   21,  132,  132,  167,  168,  168,  178,  180,
      168,  168,  179,  179,  182,  183,  185,  180,  184,  183,
      167,  186,  189,   18,  187,  188,  178,  180,  187,  188,
      179,  190,  182,  183,  185,  184,  184,  191,  192,  186,

      189,  190,  187,  188,  193,  195,  193,  196,  198,  190,
      194,  197,  199,  191,  200,  191,  192,  201,  194,  213,
      213,  197,  193,  195,  198,  196,  198,  205,  194,  197,
      199,  200,  200,  201,  202,  201,  203,  204,  202,  206,
      203,  204,  209,  205,  207,  205,  208,  207,   15,  209,
      215,  215,  202,  223,  203,  204,  208,  206,  216,  216,
      209,  219,  207,  220,  208,  214,  214,  220,  221,  214,
      214,  223,  225,  219,  222,  226,  224,  228,  225,  219,
      221,  220,  227,  222,  224,  230,  221,  229,   13,  232,
      225,  235,  222,  226,  224,  228,  233,  234,  231,  227,

      227,  229,  231,  230,  234,  229,  232,  232,  233,  235,
      237,  236,  239,  240,  233,  236,  231,  238,  242,  238,
      241,  244,  234,  242,  243,  237,  243,  246,  237,  236,
      239,  240,   11,  241,  255,  238,  242,  245,  241,  244,
      249,  245,  243,  247,  247,  246,  248,  248,  251,  252,
      249,  253,  255,  254,    0,  245,  256,  252,  251,  254,
      257,  259,  258,  261,  257,  259,  253,  252,  256,  253,
      264,  254,  258,  260,  256,  262,  263,  260,  257,  259,
      258,  261,  267,  262,  263,  265,  266,  265,  264,  267,
      270,  260,  268,  262,  263,  265,  271,  268,  266,  269,

      267,  272,  273,  274,  266,  275,  276,  269,  270,  277,
      268,  272,  278,  265,  271,  279,  280,  269,  272,  273,
      273,  274,  281,  275,  276,  277,  282,  277,  283,  278,
      278,  285,  286,  279,  280,  281,  284,  287,  283,  288,
      281,  293,  289,  282,  282,  291,  283,    0,  284,  285,
      286,  288,  290,  294,  284,  287,  289,  288,  293,  293,
      289,  292,  290,  291,  295,  292,  291,  297,  296,    0,
      298,  294,  296,  299,  300,  301,  295,  299,  300,  292,
      297,  302,  295,  303,  304,  297,  296,  298,  298,  305,
      306,  299,  300,  301,  307,  308,  309,  312,  308,  302,

      311,  303,  304,  310,  314,  310,  315,  305,  306,    0,
      313,    0,  307,  308,  309,  312,    0,  311,  311,  313,
        0,  310,  314,    0,  315,    0,    0,    0,  313,  317,
      317,  317,  317,  317,  318,  318,  318,  318,  318,  319,
      319,  319,  319,  319,  320,  320,  320,  320,  320,  321,
      321,  321,  322,    0,  322,    0,  322,  323,    0,  323,
      323,  323,  324,  324,  324,  324,  324,  325,  325,  325,
      325,  325,  326,  326,  326,  326,  326,  328,  328,  328,
      328,  328,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,

      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../js.l"
#define INITIAL 0
#line 2 "../../js.l"

/* $Id: js.l,v 1.36 2003/04/25 19:13:54 zapek Exp $ */

extern int js_lineno;
char *js_buffptr;
int js_bufflen;

static int addbuffer(char);
void yyerror(char *);
static char *buf;
static int buflen;
static int maxbuflen;
#define BUFINC  1024

#define YY_INPUT(b,r,m) r=my_yyinput(b,m)
static int my_yyinput(char *,int);

#define ECHO
#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1

#define YY_FATAL_ERROR(x) yyerror(x)

static void dummy( void ) { }
static int input( void );

#define fprintf(a,b,c) dummy()

#define YY_NO_INPUT 1
#define YY_NO_UNPUT 1
#define YY_STACK_USED 1
#define YY_NO_TOP_STATE 1
#define YY_NO_SCAN_BUFFER 1
#define YY_NO_SCAN_BYTES 1
#define YY_NO_SCAN_STRING 1
#define COMMENT 1

#define DQUOTED 2

#define SQUOTED 3

#define REGEXP 4

#line 702 "js_scanner.h"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 55 "../../js.l"


#line 856 "js_scanner.h"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 317 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 316 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;


case 1:
YY_RULE_SETUP
#line 58 "../../js.l"
{ if(!addbuffer('/')) return 0; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "../../js.l"
{ yylval->text = buf; yylval->re_flags_g = 0; yylval->re_flags_i = 0; return TOKEN_REGEXP; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 60 "../../js.l"
{ yylval->text = buf; yylval->re_flags_g = 1; yylval->re_flags_i = 0; return TOKEN_REGEXP; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "../../js.l"
{ yylval->text = buf; yylval->re_flags_g = 0; yylval->re_flags_i = 1; return TOKEN_REGEXP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "../../js.l"
{ yylval->text = buf; yylval->re_flags_g = 1; yylval->re_flags_i = 1; return TOKEN_REGEXP; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "../../js.l"
{
                             yyerror("unterminated regular expression");
                             return 0;
                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "../../js.l"
{ if(!addbuffer(yytext[0])) return 0; }
	YY_BREAK

case 8:
#line 70 "../../js.l"
case 9:
YY_RULE_SETUP
#line 70 "../../js.l"
{
                                    BEGIN INITIAL;
                                    yylval->text=buf;
                                    return TOKEN_STRING;
                                }
	YY_BREAK
case 10:
#line 76 "../../js.l"
case 11:
YY_RULE_SETUP
#line 76 "../../js.l"
{if(!addbuffer('\\')) return 0;}
	YY_BREAK
case 12:
#line 78 "../../js.l"
case 13:
YY_RULE_SETUP
#line 78 "../../js.l"
{if(!addbuffer('\'')) return 0;}
	YY_BREAK
case 14:
#line 80 "../../js.l"
case 15:
YY_RULE_SETUP
#line 80 "../../js.l"
{if(!addbuffer('"')) return 0;}
	YY_BREAK
case 16:
#line 82 "../../js.l"
case 17:
YY_RULE_SETUP
#line 82 "../../js.l"
{if(!addbuffer('\t')) return 0;}
	YY_BREAK
case 18:
#line 84 "../../js.l"
case 19:
YY_RULE_SETUP
#line 84 "../../js.l"
{if(!addbuffer('\r')) return 0;}
	YY_BREAK
case 20:
#line 86 "../../js.l"
case 21:
YY_RULE_SETUP
#line 86 "../../js.l"
{if(!addbuffer('\b')) return 0;}
	YY_BREAK
case 22:
#line 88 "../../js.l"
case 23:
YY_RULE_SETUP
#line 88 "../../js.l"
{if(!addbuffer('\f')) return 0;}
	YY_BREAK
case 24:
#line 90 "../../js.l"
case 25:
YY_RULE_SETUP
#line 90 "../../js.l"
{if(!addbuffer('\n')) return 0;}
	YY_BREAK
case 26:
#line 92 "../../js.l"
case 27:
YY_RULE_SETUP
#line 92 "../../js.l"
{if(!addbuffer(yytext[1])) return 0;}
	YY_BREAK
case 28:
#line 94 "../../js.l"
case 29:
YY_RULE_SETUP
#line 94 "../../js.l"
{ /* Skip this, line continuation */ };
	YY_BREAK
case 30:
#line 96 "../../js.l"
case 31:
YY_RULE_SETUP
#line 96 "../../js.l"
{
                                    yyerror("unterminated string constant");
                                    return 0;
                                }
	YY_BREAK
case 32:
#line 101 "../../js.l"
case 33:
YY_RULE_SETUP
#line 101 "../../js.l"
{if(!addbuffer(yytext[0])) return 0;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "../../js.l"
;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "../../js.l"
;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "../../js.l"
{js_lineno++;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "../../js.l"
{BEGIN INITIAL; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "../../js.l"
;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "../../js.l"
;
	YY_BREAK
case 40:
#line 109 "../../js.l"
case 41:
#line 110 "../../js.l"
case 42:
#line 111 "../../js.l"
case 43:
YY_RULE_SETUP
#line 111 "../../js.l"
{js_lineno++;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "../../js.l"
{BEGIN COMMENT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "../../js.l"
{return TOKEN_BREAK;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "../../js.l"
{return TOKEN_CONTINUE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "../../js.l"
{return TOKEN_ELSE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "../../js.l"
{return TOKEN_FALSE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "../../js.l"
{return TOKEN_FOR;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "../../js.l"
{return TOKEN_DEBUG;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "../../js.l"
{return TOKEN_FUNCTION;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "../../js.l"
{return TOKEN_IF;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "../../js.l"
{return TOKEN_IN;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "../../js.l"
{return TOKEN_NEW;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "../../js.l"
{return TOKEN_DELETE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "../../js.l"
{return TOKEN_NULL;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "../../js.l"
{return TOKEN_RETURN;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "../../js.l"
{return TOKEN_DO;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "../../js.l"
{return TOKEN_THIS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "../../js.l"
{return TOKEN_VOID;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "../../js.l"
{return TOKEN_DEBUGESTACK;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "../../js.l"
{return TOKEN_TYPEOF;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "../../js.l"
{return TOKEN_TRUE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "../../js.l"
{return TOKEN_UNDEFINED;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 133 "../../js.l"
{return TOKEN_NAN;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 134 "../../js.l"
{return TOKEN_INF;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 135 "../../js.l"
{return TOKEN_VAR;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 136 "../../js.l"
{return TOKEN_WHILE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 137 "../../js.l"
{return TOKEN_WITH;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 138 "../../js.l"
{return TOKEN_SWITCH;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 139 "../../js.l"
{return TOKEN_CASE;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 140 "../../js.l"
{return TOKEN_DEFAULT;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 141 "../../js.l"
{return TOKEN_EVAL;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 142 "../../js.l"
{return TOKEN_ISNAN;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 143 "../../js.l"
{return TOKEN_ISFINITE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 144 "../../js.l"
{return TOKEN_PARSEINT;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 145 "../../js.l"
{return TOKEN_PARSEFLOAT;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 146 "../../js.l"
{return TOKEN_STRINGFUNC;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 147 "../../js.l"
{return TOKEN_NUMBER;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 148 "../../js.l"
{return TOKEN_ESCAPE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 149 "../../js.l"
{return TOKEN_UNESCAPE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 150 "../../js.l"
{return TOKEN_LEQ;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 151 "../../js.l"
{return TOKEN_GEQ;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 152 "../../js.l"
{return TOKEN_EQEQ;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 153 "../../js.l"
{return TOKEN_STRONGEQ;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 154 "../../js.l"
{return TOKEN_PLUSEQ;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 155 "../../js.l"
{return TOKEN_MINUSEQ;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 156 "../../js.l"
{return TOKEN_TIMESEQ;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 157 "../../js.l"
{return TOKEN_DIVEQ;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 158 "../../js.l"
{return TOKEN_NOTEQ;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "../../js.l"
{return TOKEN_STRONGNOTEQ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 160 "../../js.l"
{return TOKEN_MODEQ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 161 "../../js.l"
{return TOKEN_ANDEQ;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 162 "../../js.l"
{return TOKEN_OREQ;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 163 "../../js.l"
{return TOKEN_XOREQ;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 164 "../../js.l"
{return TOKEN_GGGEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 165 "../../js.l"
{return TOKEN_GGEQ;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 166 "../../js.l"
{return TOKEN_LLEQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 167 "../../js.l"
{return TOKEN_GGG;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 168 "../../js.l"
{return TOKEN_GG;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 169 "../../js.l"
{return TOKEN_LL;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 170 "../../js.l"
{return TOKEN_PLUSPLUS;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 171 "../../js.l"
{return TOKEN_MINUSMINUS;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 172 "../../js.l"
{return TOKEN_ANDAND;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 173 "../../js.l"
{return TOKEN_OROR;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "../../js.l"
{maxbuflen=buflen=0;return '/';}
	YY_BREAK
case 107:
#line 176 "../../js.l"
case 108:
YY_RULE_SETUP
#line 176 "../../js.l"
{return yytext[0];}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 177 "../../js.l"
{
                                    buf=alloca(BUFINC);
                                    if(!buf) {
                                        yyerror("out of memory");
                                        return 0;
                                    }
                                    maxbuflen=BUFINC;
                                    *buf=0;
                                    buflen=0;
                                    if(yytext[0]=='\'')
                                        BEGIN SQUOTED;
                                    else
                                        BEGIN DQUOTED;
                                }
	YY_BREAK
case 110:
#line 192 "../../js.l"
case 111:
#line 193 "../../js.l"
case 112:
#line 194 "../../js.l"
case 113:
#line 195 "../../js.l"
case 114:
#line 196 "../../js.l"
case 115:
#line 197 "../../js.l"
case 116:
#line 198 "../../js.l"
case 117:
YY_RULE_SETUP
#line 198 "../../js.l"
{
                                    buf=alloca(yyleng+1);
                                    if(!buf) {
                                        yyerror("not enough memory");
                                        return 0;
                                    }
                                    strcpy(buf,yytext);
                                    yylval->text=buf;
                                    return TOKEN_SYMBOL;
                                }
	YY_BREAK
case 118:
#line 209 "../../js.l"
case 119:
#line 210 "../../js.l"
case 120:
YY_RULE_SETUP
#line 210 "../../js.l"
{
                                    double val=0,mul;
                                    char c,*cp=yytext;
                                    int sign=1,eval;
                                    while((c=*cp++)&&(c>='0')&&(c<='9'))
                                        val=val*10+(c-'0');
                                    if(c=='.') {
                                        mul=0.1;
                                        while((c=*cp++)&&(c>='0')&&(c<='9')) {
                                            val+=(c-'0')*mul;
                                            mul/=10;
                                        }
                                    }
                                    if((c=='e')||(c=='E')) {
                                        c=*cp++;
                                        if(c=='-')
                                            sign=-1;
                                        else if(c!='+')
                                            cp--;
                                        eval=0;
                                        while((c=*cp++)&&(c>='0')&&(c<='9'))
                                            eval=eval*10+(c-'0');
                                        val*=exp(log(10.0)*eval*sign);
                                    }
                                    yylval->real=val;
                                    return TOKEN_REAL;
                                }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 237 "../../js.l"
{
                                    double val=0;
                                    char *cp=yytext+2,c;
                                    while(c=*cp++) 
									{
                                        val*=16.0;
                                        if((c>='0')&&(c<='9'))
                                            val+=c-'0';
                                        else if((c>='A')&&(c<='F'))
                                            val+=c-'A'+10;
                                        else
                                            val+=c-'a'+10;
                                    }
                                    yylval->real=val;
                                    return TOKEN_REAL;
                                }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 253 "../../js.l"
{
					if( yytext[ 0 ] == '0' )
					{
						// Check for a valid octal sequence, and convert
						char *cp = yytext + 1;
						double val = 0;
						char c;
						while( c = *cp++ )
						{
							if( c >= '8' )
								break; // Invalid octal sequence, abort, and handle it as decimal
							val = val * 8 + ( c - '0' );
						}
						if( !c )
						{
							yylval->real = val;
							return TOKEN_REAL;
						}
					}

					if( strlen( yytext ) < 8 )
					{
						yylval->integer=atoi( yytext );
						return TOKEN_INTEGER;
					}
					else
					{
						yylval->real = atof( yytext );
						return TOKEN_REAL;
					}
                                }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 284 "../../js.l"
;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 285 "../../js.l"
{js_lineno++;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 286 "../../js.l"
{
                                    char buffer[ 128 ];

                                    sprintf( buffer, "invalid lexical token: '%.32s' (%c)", yytext, yytext[ 0 ] );
                                    yyerror( buffer );
                                    return 0;
                                }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 293 "../../js.l"
ECHO;
	YY_BREAK
#line 1598 "js_scanner.h"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQUOTED):
case YY_STATE_EOF(SQUOTED):
case YY_STATE_EOF(REGEXP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 317 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 317 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 316);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 293 "../../js.l"

static int addbuffer(char c) {
    char *buf2;
    if(buflen>maxbuflen-5) {
        buf2=alloca(maxbuflen+BUFINC);
        if(!buf2) {
            yyerror("not enough memory");
            return 0;
        }
        memcpy(buf2,buf,maxbuflen);
        buf=buf2;
        maxbuflen=maxbuflen+BUFINC;
    }
    buf[buflen++]=c;
    buf[buflen]=0;
    return 1;
}

void lex_initialize( char *ptr, int len, int lineno ) 
{
    yy_init=1;
    js_buffptr = ptr;
    js_bufflen = len;
    js_lineno = lineno;
    yyrestart( 0 );
    BEGIN( INITIAL );
}

static int my_yyinput( char *buf, int max ) 
{
    int cnt = 0;

    while( max && ( js_bufflen-- > 0 ) )
    {
        if( *js_buffptr == '\r' )
        {
            js_buffptr++;
            if( *js_buffptr == '\n' )
                continue;
            else
                *buf++ = '\n';
        }
        else
            *buf++ = *js_buffptr++;
        cnt++;
        max--;
    }
    return( cnt );  
}
